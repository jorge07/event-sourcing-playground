parameters:

    event_store_host: "%env(EVENT_STORE_HOST)%"
    event_store_db: "%env(EVENT_STORE_DB)%"
    event_store_user: "%env(EVENT_STORE_USER)%"
    event_store_pass: "%env(EVENT_STORE_PASS)%"

    env(EVENT_STORE_HOST): mysql
    env(EVENT_STORE_DB): ddd
    env(EVENT_STORE_USER): root
    env(EVENT_STORE_PASS): root

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true
        autoconfigure: true
        public: false

######    Application    ######

    Leos\Application\:
        resource: '../src/Application/**/*Handler'

######  Infrastructure   ######

    Leos\Infrastructure\Shared\Persistence\EventStore\Config\MysqlEventStoreConfig:
        autowire: false
        arguments:
          $host: "%env(EVENT_STORE_HOST)%"
          $user: "%env(EVENT_STORE_USER)%"
          $pass: "%env(EVENT_STORE_PASS)%"
          $database: "%env(EVENT_STORE_DB)%"
          $streamsTable: "event_stream"

    Leos\Infrastructure\Shared\Persistence\EventStore\EventStoreFactory: ~

    Prooph\EventStore\ActionEventEmitterEventStore:
        factory: [ '@Leos\Infrastructure\Shared\Persistence\EventStore\EventStoreFactory', 'actionEventEmitterStore']

    Leos\Domain\User\Repository\UserRepositoryInterface: '@Leos\Infrastructure\User\Persistence\UserRepository'

    Leos\Infrastructure\:
        resource: '../src/Infrastructure/'
        exclude: '../src/Infrastructure/**/{Config}'

######        UI         ######

    Leos\UI\API\Controller\:
        resource: '../src/UI/API/Controller'
        tags: ['controller.service_arguments']


    Leos\UI\API\EventListener\ExceptionListener:
        tags:
          - { name: kernel.event_listener, event: kernel.exception }

    Leos\UI\Cli\Command\:
        resource: '../src/UI/Cli/Command'
        tags:
              - { name: "console.command" }